---
description: "Comprehensive accessibility guidelines for building WCAG 2.1 AA compliant interfaces with semantic HTML5, proper ARIA usage, and keyboard navigation support across all frameworks and UI libraries"
globs: "**/*.{tsx,jsx,ts,js,vue,svelte,html,css,scss}"
alwaysApply: true
---

# Web Accessibility Rules

## üö® CRITICAL INSTRUCTIONS FOR AI LANGUAGE MODELS üö®

You MUST create accessible interfaces following WCAG 2.1 AA standards. Every interface you generate MUST be usable by people with disabilities. You MUST NOT create interfaces that exclude users based on ability.

## Core Accessibility Principles

**Universal Design**: Create interfaces usable by everyone, regardless of abilities or disabilities
**Semantic First**: Always prioritize semantic HTML5 elements over custom implementations
**Progressive Enhancement**: Build accessible foundations, then enhance with JavaScript
**Keyboard Navigation**: Every interactive element must be keyboard accessible
**Screen Reader Compatible**: All content must be perceivable by assistive technology

## Semantic HTML5 Requirements

### ‚úÖ ALWAYS USE semantic HTML5 elements first:

```html
<!-- ‚úÖ CORRECT: Semantic structure -->
<header>
  <nav aria-label="Main navigation">
    <ul>
      <li><a href="/" aria-current="page">Home</a></li>
      <li><a href="/about">About</a></li>
    </ul>
  </nav>
</header>

<main>
  <h1>Page Title</h1>
  <section aria-labelledby="products-heading">
    <h2 id="products-heading">Our Products</h2>
    <article>
      <h3>Product Name</h3>
      <p>Product description...</p>
      <button type="button">Add to Cart</button>
    </article>
  </section>
</main>

<aside aria-label="Related content">
  <h2>Related Articles</h2>
</aside>

<footer>
  <p>&copy; 2024 Company Name</p>
</footer>
```

### ‚ùå NEVER DO: Non-semantic markup

```html
<!-- ‚ùå WRONG: Non-semantic structure -->
<div class="header">
  <div class="nav">
    <div class="nav-item">Home</div>
    <div class="nav-item">About</div>
  </div>
</div>

<div class="content">
  <div class="title">Page Title</div>
  <div class="section">
    <div class="heading">Our Products</div>
    <div onclick="addToCart()">Add to Cart</div>
  </div>
</div>
```

### Heading Hierarchy Rules

**CRITICAL**: Maintain strict heading hierarchy for screen readers and document outline:

```html
<!-- ‚úÖ CORRECT: Logical heading structure -->
<h1>Main Page Title</h1>
  <h2>Section Title</h2>
    <h3>Subsection Title</h3>
    <h3>Another Subsection</h3>
  <h2>Another Section</h2>
    <h3>Subsection of Second Section</h3>
```

```html
<!-- ‚ùå WRONG: Skipped heading levels -->
<h1>Main Page Title</h1>
  <h3>Subsection Title</h3> <!-- ‚ùå Skipped h2 -->
  <h5>Another Title</h5>    <!-- ‚ùå Skipped h4 -->
```

**Remember**: Headings are for structure, NOT styling. Use CSS for visual appearance.

## Interactive Elements

### Button vs Link Decision Tree

```html
<!-- ‚úÖ Use <button> for actions -->
<button type="button" onclick="saveDocument()">Save</button>
<button type="submit">Submit Form</button>
<button type="button" aria-expanded="false" onclick="toggleMenu()">Menu</button>

<!-- ‚úÖ Use <a> for navigation -->
<a href="/products">View Products</a>
<a href="#section2">Jump to Section 2</a>
<a href="mailto:contact@company.com">Email Us</a>

<!-- ‚ùå NEVER: Wrong element usage -->
<div onclick="navigate()">Go to Page</div>  <!-- ‚ùå Use <a> -->
<a href="#" onclick="saveData()">Save</a>   <!-- ‚ùå Use <button> -->
```

## ARIA Usage Guidelines

### When to Use ARIA

**ONLY use ARIA when semantic HTML is insufficient**. Follow this decision process:

1. **Can semantic HTML do this?** ‚Üí Use semantic HTML
2. **Is this a standard UI pattern?** ‚Üí Use established ARIA patterns
3. **Is this a custom component?** ‚Üí Use appropriate ARIA attributes

### ‚úÖ CORRECT ARIA Usage

```html
<!-- ‚úÖ Custom tab component (no semantic equivalent) -->
<div role="tablist" aria-label="Account settings">
  <button role="tab" aria-selected="true" aria-controls="panel-1" id="tab-1">
    Profile
  </button>
  <button role="tab" aria-selected="false" aria-controls="panel-2" id="tab-2">
    Security
  </button>
</div>
<div role="tabpanel" id="panel-1" aria-labelledby="tab-1">
  Profile settings content...
</div>

<!-- ‚úÖ Enhanced semantic element -->
<button aria-expanded="false" aria-haspopup="listbox" aria-describedby="help-text">
  Choose Option
</button>
<div id="help-text">Select an option from the dropdown menu</div>

<!-- ‚úÖ Live region for dynamic content -->
<div aria-live="polite" id="status-message"></div>
```

### ‚ùå NEVER DO: Redundant ARIA

```html
<!-- ‚ùå WRONG: Redundant roles on semantic elements -->
<button role="button">Submit</button>        <!-- ‚ùå role="button" is redundant -->
<input type="text" role="textbox">           <!-- ‚ùå role="textbox" is redundant -->
<h1 role="heading" aria-level="1">Title</h1> <!-- ‚ùå Completely redundant -->
```

### Essential ARIA Patterns

```html
<!-- Form labels -->
<label for="email">Email Address</label>
<input type="email" id="email" required aria-describedby="email-error">
<div id="email-error" role="alert">Please enter a valid email</div>

<!-- Modal dialog -->
<div role="dialog" aria-modal="true" aria-labelledby="modal-title">
  <h2 id="modal-title">Confirm Action</h2>
  <p>Are you sure you want to delete this item?</p>
  <button type="button">Cancel</button>
  <button type="button">Delete</button>
</div>

<!-- Accordion -->
<button aria-expanded="false" aria-controls="content-1" id="header-1">
  Section Title
</button>
<div id="content-1" aria-labelledby="header-1" hidden>
  Section content...
</div>
```

## Keyboard Navigation Requirements

### Focus Management Rules

**Every interactive element MUST be keyboard accessible:**

```css
/* ‚úÖ ALWAYS provide visible focus indicators */
button:focus,
input:focus,
a:focus {
  outline: 2px solid #0066cc;
  outline-offset: 2px;
}

/* ‚úÖ Enhanced focus for better visibility */
.custom-button:focus {
  box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.5);
  outline: 2px solid #0066cc;
}
```

### Keyboard Interaction Patterns

```javascript
// ‚úÖ CORRECT: Standard keyboard handling
function handleKeyDown(event) {
  switch (event.key) {
    case 'Enter':
    case ' ': // Space bar
      event.preventDefault();
      activateButton();
      break;
    case 'Escape':
      closeModal();
      break;
    case 'ArrowDown':
      moveToNextItem();
      break;
    case 'ArrowUp':
      moveToPreviousItem();
      break;
    case 'Home':
      moveToFirstItem();
      break;
    case 'End':
      moveToLastItem();
      break;
  }
}
```

### Tab Order Management

```html
<!-- ‚úÖ CORRECT: Natural tab order -->
<form>
  <input type="text" placeholder="First field">     <!-- tabindex 0 (implicit) -->
  <input type="email" placeholder="Second field">   <!-- tabindex 0 (implicit) -->
  <button type="submit">Submit</button>              <!-- tabindex 0 (implicit) -->
</form>

<!-- ‚úÖ CORRECT: Skip to main content -->
<a href="#main-content" class="skip-link">Skip to main content</a>
<nav>Navigation content...</nav>
<main id="main-content">Main content...</main>

<!-- ‚úÖ CORRECT: Programmatic focus -->
<button tabindex="-1" id="modal-close">√ó</button>  <!-- Focusable by JS only -->
```

```html
<!-- ‚ùå NEVER: Positive tabindex values -->
<input tabindex="1">  <!-- ‚ùå Breaks natural tab order -->
<button tabindex="3"> <!-- ‚ùå Creates confusing navigation -->
```

## Framework-Specific Implementation

### React/Next.js

```tsx
// ‚úÖ CORRECT: Accessible React component
interface ButtonProps {
  children: React.ReactNode;
  onClick: () => void;
  'aria-describedby'?: string;
  disabled?: boolean;
  variant?: 'primary' | 'secondary';
}

const AccessibleButton: React.FC<ButtonProps> = ({ 
  children, 
  onClick, 
  'aria-describedby': ariaDescribedBy,
  disabled = false,
  variant = 'primary'
}) => {
  return (
    <button 
      type="button"
      onClick={onClick}
      aria-describedby={ariaDescribedBy}
      disabled={disabled}
      className={`btn btn-${variant}`}
    >
      {children}
    </button>
  );
};

// ‚úÖ CORRECT: Form with validation
function ContactForm() {
  const [errors, setErrors] = useState<Record<string, string>>({});

  return (
    <form onSubmit={handleSubmit} noValidate>
      <fieldset>
        <legend>Contact Information</legend>
        
        <div>
          <label htmlFor="name">
            Name <span aria-label="required">*</span>
          </label>
          <input
            type="text"
            id="name"
            name="name"
            required
            aria-invalid={errors.name ? 'true' : 'false'}
            aria-describedby={errors.name ? 'name-error' : undefined}
          />
          {errors.name && (
            <div id="name-error" role="alert">
              {errors.name}
            </div>
          )}
        </div>
      </fieldset>
    </form>
  );
}
```

### Vue 3

```vue
<script setup lang="ts">
interface Props {
  label: string;
  required?: boolean;
  error?: string;
  modelValue: string;
}

const props = withDefaults(defineProps<Props>(), {
  required: false,
  error: ''
});

const emit = defineEmits<{
  'update:modelValue': [value: string];
}>();

const inputId = `input-${Math.random().toString(36).substr(2, 9)}`;
const errorId = `${inputId}-error`;
</script>

<template>
  <div class="form-field">
    <label :for="inputId">
      {{ label }}
      <span v-if="required" aria-label="required">*</span>
    </label>
    <input 
      :id="inputId"
      :value="modelValue"
      @input="emit('update:modelValue', ($event.target as HTMLInputElement).value)"
      :aria-describedby="error ? errorId : undefined"
      :aria-invalid="!!error"
      type="text"
    />
    <div v-if="error" :id="errorId" role="alert">
      {{ error }}
    </div>
  </div>
</template>
```

### Angular

```typescript
// ‚úÖ CORRECT: Angular component with CDK a11y
import { A11yModule } from '@angular/cdk/a11y';
import { Component, Input, forwardRef } from '@angular/core';
import { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';

@Component({
  selector: 'accessible-input',
  template: `
    <div class="form-field">
      <label [for]="inputId">
        {{ label }}
        <span *ngIf="required" aria-label="required">*</span>
      </label>
      <input 
        [id]="inputId"
        [value]="value"
        (input)="onInput($event)"
        [attr.aria-describedby]="error ? errorId : null"
        [attr.aria-invalid]="!!error"
        type="text"
      />
      <div *ngIf="error" [id]="errorId" role="alert">
        {{ error }}
      </div>
    </div>
  `,
  providers: [
    {
      provide: NG_VALUE_ACCESSOR,
      useExisting: forwardRef(() => AccessibleInputComponent),
      multi: true
    }
  ]
})
export class AccessibleInputComponent implements ControlValueAccessor {
  @Input() label = '';
  @Input() required = false;
  @Input() error = '';
  
  inputId = `input-${Math.random().toString(36).substr(2, 9)}`;
  errorId = `${this.inputId}-error`;
  value = '';

  // ... ControlValueAccessor implementation
}
```

## UI Library Integration

### Preferred Accessible Libraries

**React Ecosystem:**
- ‚úÖ Chakra UI - Excellent accessibility out of box
- ‚úÖ Mantine - WCAG compliant components
- ‚úÖ Ariakit - Unstyled accessible primitives
- ‚úÖ Headless UI - Unstyled accessible components
- ‚úÖ React Aria (Adobe) - Accessible component hooks

**Vue Ecosystem:**
- ‚úÖ Headless UI Vue - Unstyled accessible components
- ‚úÖ Vuetify - Material Design with accessibility
- ‚úÖ Quasar - WCAG compliant components

**Angular Ecosystem:**
- ‚úÖ Angular Material - Built-in accessibility
- ‚úÖ PrimeNG - Comprehensive accessible components

### Using UI Libraries Correctly

```tsx
// ‚úÖ PREFERRED: Use library components
import { Button, FormControl, FormLabel, Input, Alert } from '@chakra-ui/react';

function MyForm() {
  return (
    <FormControl isRequired isInvalid={!!error}>
      <FormLabel>Email Address</FormLabel>
      <Input type="email" />
      {error && <Alert status="error">{error}</Alert>}
    </FormControl>
  );
}

// ‚úÖ ACCEPTABLE: Enhance library components when needed
import { Button } from '@chakra-ui/react';

function CustomButton({ children, ...props }) {
  return (
    <Button
      {...props}
      _focus={{
        boxShadow: 'outline',
        outline: '2px solid',
        outlineColor: 'blue.500',
      }}
    >
      {children}
    </Button>
  );
}
```

## Color and Visual Design

### Color Contrast Requirements

```css
/* ‚úÖ MEET WCAG AA contrast requirements */
.text-normal {
  color: #212529; /* 16.75:1 ratio against white */
  background: white;
}

.text-large {
  color: #495057; /* 7.00:1 ratio - acceptable for large text */
  background: white;
  font-size: 18px;
}

.interactive-element {
  color: #0056b3; /* 4.52:1 ratio */
  background: white;
  border: 2px solid #0056b3; /* Don't rely on color alone */
}

/* ‚úÖ Support user preferences */
@media (prefers-color-scheme: dark) {
  .text-normal {
    color: #f8f9fa;
    background: #212529;
  }
}

@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}

@media (prefers-contrast: high) {
  .interactive-element {
    border-width: 3px;
    outline: 2px solid;
  }
}
```

### Visual Indicators Beyond Color

```html
<!-- ‚úÖ CORRECT: Multiple indicators -->
<div class="status-message success">
  <svg aria-hidden="true" class="icon">
    <!-- Success checkmark icon -->
  </svg>
  <span>Form submitted successfully!</span>
</div>

<div class="form-field error">
  <label for="email">
    Email Address
    <span class="required-indicator" aria-label="required">*</span>
  </label>
  <input id="email" class="error" aria-invalid="true" />
  <div role="alert">
    <svg aria-hidden="true" class="error-icon">
      <!-- Error icon -->
    </svg>
    Please enter a valid email address
  </div>
</div>
```

## Form Accessibility

### Complete Form Implementation

```html
<!-- ‚úÖ COMPREHENSIVE accessible form -->
<form novalidate>
  <fieldset>
    <legend>Personal Information</legend>
    
    <!-- Text input with all accessibility features -->
    <div class="form-group">
      <label for="firstName">
        First Name
        <span aria-label="required">*</span>
      </label>
      <input 
        type="text" 
        id="firstName" 
        name="firstName"
        required 
        aria-describedby="firstName-hint firstName-error"
        aria-invalid="false"
        autocomplete="given-name"
      />
      <div id="firstName-hint">Enter your legal first name</div>
      <div id="firstName-error" role="alert" hidden>
        <!-- Error message appears here -->
      </div>
    </div>

    <!-- Select with proper labeling -->
    <div class="form-group">
      <label for="country">Country</label>
      <select id="country" name="country" required>
        <option value="">Choose a country</option>
        <option value="us">United States</option>
        <option value="ca">Canada</option>
        <option value="uk">United Kingdom</option>
      </select>
    </div>

    <!-- Radio group -->
    <fieldset class="form-group">
      <legend>Preferred Contact Method</legend>
      <div>
        <input type="radio" id="contact-email" name="contact" value="email" />
        <label for="contact-email">Email</label>
      </div>
      <div>
        <input type="radio" id="contact-phone" name="contact" value="phone" />
        <label for="contact-phone">Phone</label>
      </div>
    </fieldset>

    <!-- Checkbox with proper association -->
    <div class="form-group">
      <input type="checkbox" id="newsletter" name="newsletter" />
      <label for="newsletter">
        Subscribe to our newsletter
        <span class="optional">(optional)</span>
      </label>
    </div>
  </fieldset>

  <div class="form-actions">
    <button type="button" class="secondary">Cancel</button>
    <button type="submit" class="primary">Create Account</button>
  </div>
</form>
```

## Image and Media Accessibility

### Image Alt Text Guidelines

```html
<!-- ‚úÖ INFORMATIVE images -->
<img src="sales-chart.png" alt="Sales increased 25% from Q1 to Q2 2024, reaching $2.3 million">

<!-- ‚úÖ DECORATIVE images -->
<img src="decorative-border.png" alt="" role="presentation">
<!-- OR -->
<img src="decorative-border.png" alt="">

<!-- ‚úÖ COMPLEX images with long description -->
<figure>
  <img src="complex-chart.png" alt="Quarterly sales data by region" aria-describedby="chart-data">
  <figcaption id="chart-data">
    Sales data showing: North America $1.2M (40%), Europe $900K (30%), 
    Asia $600K (20%), Other $300K (10%). Overall increase of 15% from last quarter.
  </figcaption>
</figure>

<!-- ‚úÖ FUNCTIONAL images (like buttons) -->
<button type="button">
  <img src="print-icon.svg" alt="Print document">
</button>
```

### Icon Accessibility

```html
<!-- ‚úÖ Icon with adjacent text (hide from screen readers) -->
<button>
  <svg aria-hidden="true" width="16" height="16">
    <path d="..."/>
  </svg>
  Save Document
</button>

<!-- ‚úÖ Icon-only button (provide accessible name) -->
<button aria-label="Close dialog">
  <svg aria-hidden="true" width="24" height="24">
    <path d="..."/>
  </svg>
</button>

<!-- ‚úÖ Meaningful icon (provide description) -->
<span role="img" aria-label="Warning">‚ö†Ô∏è</span>
<span role="img" aria-label="Celebration">üéâ</span>

<!-- ‚úÖ Icon fonts -->
<button>
  <i class="fas fa-search" aria-hidden="true"></i>
  Search Products
</button>
```

### Video and Audio

```html
<!-- ‚úÖ Video with captions and transcript -->
<video controls>
  <source src="video.mp4" type="video/mp4">
  <track kind="captions" src="captions.vtt" srclang="en" label="English">
  <track kind="descriptions" src="descriptions.vtt" srclang="en">
  <p>Your browser doesn't support video. <a href="video.mp4">Download the video</a></p>
</video>

<!-- ‚úÖ Auto-playing video (accessibility considerations) -->
<video autoplay muted loop aria-label="Background video of city skyline">
  <source src="bg-video.mp4" type="video/mp4">
</video>
<button id="pause-bg-video">Pause background video</button>
```

## Data Tables

### Accessible Table Implementation

```html
<!-- ‚úÖ SIMPLE data table -->
<table>
  <caption>Quarterly Sales Results 2024</caption>
  <thead>
    <tr>
      <th scope="col">Quarter</th>
      <th scope="col">Revenue</th>
      <th scope="col">Growth</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th scope="row">Q1</th>
      <td>$2,000,000</td>
      <td>+12%</td>
    </tr>
    <tr>
      <th scope="row">Q2</th>
      <td>$2,300,000</td>
      <td>+15%</td>
    </tr>
  </tbody>
</table>

<!-- ‚úÖ COMPLEX table with multiple header levels -->
<table>
  <caption>Sales Performance by Region and Product</caption>
  <thead>
    <tr>
      <th rowspan="2" scope="col">Product</th>
      <th colspan="2" scope="colgroup">North America</th>
      <th colspan="2" scope="colgroup">Europe</th>
    </tr>
    <tr>
      <th scope="col">Q1</th>
      <th scope="col">Q2</th>
      <th scope="col">Q1</th>
      <th scope="col">Q2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th scope="row">Laptops</th>
      <td>$500K</td>
      <td>$650K</td>
      <td>$300K</td>
      <td>$380K</td>
    </tr>
  </tbody>
</table>
```

## Component-Specific Patterns

### Modal Dialog

```html
<!-- ‚úÖ COMPLETE accessible modal -->
<div 
  role="dialog" 
  aria-modal="true" 
  aria-labelledby="modal-title" 
  aria-describedby="modal-description"
>
  <div class="modal-content">
    <header>
      <h2 id="modal-title">Delete Item</h2>
      <button type="button" aria-label="Close dialog" onclick="closeModal()">
        <span aria-hidden="true">√ó</span>
      </button>
    </header>
    
    <div id="modal-description">
      <p>Are you sure you want to delete this item? This action cannot be undone.</p>
    </div>
    
    <footer>
      <button type="button" onclick="closeModal()">Cancel</button>
      <button type="button" onclick="deleteItem()">Delete</button>
    </footer>
  </div>
</div>
```

```javascript
// ‚úÖ Modal focus management
function openModal(modalId) {
  const modal = document.getElementById(modalId);
  const focusableElements = modal.querySelectorAll(
    'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
  );
  const firstElement = focusableElements[0];
  const lastElement = focusableElements[focusableElements.length - 1];

  // Store currently focused element
  previouslyFocused = document.activeElement;

  // Show modal and focus first element
  modal.hidden = false;
  firstElement.focus();

  // Trap focus within modal
  modal.addEventListener('keydown', (e) => {
    if (e.key === 'Tab') {
      if (e.shiftKey) {
        if (document.activeElement === firstElement) {
          e.preventDefault();
          lastElement.focus();
        }
      } else {
        if (document.activeElement === lastElement) {
          e.preventDefault();
          firstElement.focus();
        }
      }
    }
    if (e.key === 'Escape') {
      closeModal();
    }
  });
}

function closeModal() {
  modal.hidden = true;
  previouslyFocused.focus();
}
```

### Dropdown/Combobox

```html
<!-- ‚úÖ ACCESSIBLE dropdown -->
<div class="combobox-container">
  <label for="country-input">Choose a country</label>
  <input
    type="text"
    id="country-input"
    role="combobox"
    aria-expanded="false"
    aria-haspopup="listbox"
    aria-controls="country-listbox"
    aria-autocomplete="list"
    autocomplete="country"
  />
  <ul
    id="country-listbox"
    role="listbox"
    aria-label="Countries"
    hidden
  >
    <li role="option" id="option-us">United States</li>
    <li role="option" id="option-ca">Canada</li>
    <li role="option" id="option-uk">United Kingdom</li>
  </ul>
</div>
```

### Accordion

```html
<!-- ‚úÖ ACCESSIBLE accordion -->
<div class="accordion">
  <div class="accordion-item">
    <h3>
      <button
        type="button"
        aria-expanded="false"
        aria-controls="section1-content"
        id="section1-header"
        class="accordion-trigger"
      >
        Section 1 Title
      </button>
    </h3>
    <div
      id="section1-content"
      role="region"
      aria-labelledby="section1-header"
      class="accordion-panel"
      hidden
    >
      <p>Section 1 content goes here...</p>
    </div>
  </div>
</div>
```

## Testing and Validation

### Manual Testing Checklist

**Keyboard Navigation:**
- [ ] Tab through entire interface using only keyboard
- [ ] Verify all interactive elements are reachable
- [ ] Test Escape key functionality in modals/dropdowns
- [ ] Verify focus indicators are visible and clear
- [ ] Test arrow key navigation in menus/lists

**Screen Reader Testing:**
- [ ] Test with NVDA (Windows), JAWS (Windows), or VoiceOver (Mac)
- [ ] Verify all content is announced correctly
- [ ] Test form labels and error messages
- [ ] Verify landmark navigation works
- [ ] Test dynamic content announcements

**Visual Testing:**
- [ ] Test at 200% zoom level
- [ ] Verify color contrast with tools like WebAIM's checker
- [ ] Test with Windows High Contrast mode
- [ ] Verify content reflows properly at different viewport sizes

### Automated Testing

```javascript
// ‚úÖ Jest + Testing Library + axe-core
import { render } from '@testing-library/react';
import { axe, toHaveNoViolations } from 'jest-axe';

expect.extend(toHaveNoViolations);

test('component should be accessible', async () => {
  const { container } = render(<MyComponent />);
  const results = await axe(container);
  expect(results).toHaveNoViolations();
});
```

```javascript
// ‚úÖ Playwright accessibility testing
import { test, expect } from '@playwright/test';
import AxeBuilder from '@axe-core/playwright';

test('homepage should be accessible', async ({ page }) => {
  await page.goto('/');
  
  const accessibilityScanResults = await new AxeBuilder({ page })
    .withTags(['wcag2a', 'wcag2aa', 'wcag21aa'])
    .analyze();
  
  expect(accessibilityScanResults.violations).toEqual([]);
});
```

## Common Mistakes to Avoid

### ‚ùå NEVER DO These Things

```html
<!-- ‚ùå Removing focus indicators -->
<style>
  *:focus { outline: none; } /* DON'T DO THIS */
</style>

<!-- ‚ùå Using placeholders as labels -->
<input type="text" placeholder="Your name"> <!-- Missing label -->

<!-- ‚ùå Non-descriptive link text -->
<a href="/products">Click here</a>
<a href="/learn-more">Read more</a>

<!-- ‚ùå Empty alt attributes on informative images -->
<img src="important-chart.png" alt="">

<!-- ‚ùå Using color alone to convey information -->
<span style="color: red;">Required field</span>

<!-- ‚ùå Inaccessible custom controls -->
<div onclick="toggle()" class="fake-checkbox">‚òê</div>

<!-- ‚ùå Missing form labels -->
<input type="email"> <!-- No associated label -->

<!-- ‚ùå Auto-playing audio/video with sound -->
<video autoplay> <!-- Will disrupt screen readers -->
```

### ‚ùå JavaScript Accessibility Mistakes

```javascript
// ‚ùå WRONG: Destroying keyboard navigation
element.addEventListener('click', handler);
// Missing keyboard event handling

// ‚ùå WRONG: Not managing focus
function openModal() {
  modal.style.display = 'block';
  // Missing focus management
}

// ‚ùå WRONG: Not announcing dynamic changes
function updateStatus(message) {
  statusElement.textContent = message;
  // Screen readers won't announce this change
}
```

## AI MODEL VERIFICATION STEPS

Before generating any code, you MUST verify:

1. **Semantic HTML Check**: Are you using semantic HTML5 elements first? ‚úì
2. **ARIA Necessity Check**: Are you only using ARIA when semantic HTML is insufficient? ‚úì
3. **Keyboard Navigation Check**: Are all interactive elements keyboard accessible? ‚úì
4. **Focus Management Check**: Are focus indicators visible and logical? ‚úì
5. **Screen Reader Check**: Will screen readers understand this content? ‚úì
6. **Color Contrast Check**: Does text meet WCAG AA standards? ‚úì
7. **Form Accessibility Check**: Do all form controls have proper labels? ‚úì

## CONSEQUENCES OF ACCESSIBILITY VIOLATIONS

If you generate code that fails accessibility standards:

1. **Legal Consequences**: Potential ADA/Section 508 violations
2. **User Exclusion**: People with disabilities cannot use the interface  
3. **SEO Impact**: Search engines prefer accessible, semantic content
4. **Business Impact**: Reduced user base and potential lawsuits
5. **Code Quality**: Inaccessible code is generally poorly structured

## AI MODEL RESPONSE TEMPLATE

When generating interface code, you MUST:

1. **Start with semantic HTML5** structure
2. **Add ARIA only when necessary** for custom components
3. **Ensure keyboard navigation** works for all interactive elements
4. **Verify color contrast** meets WCAG AA standards
5. **Test with screen reader scenarios** in mind
6. **Include focus management** for dynamic content
7. **Provide alternative text** for images and media

**Remember**: Accessibility is not optional. Every interface must be usable by everyone. When in doubt, choose the more accessible option.

---

**This rule always applies when generating HTML, CSS, JavaScript, or framework-specific code for user interfaces. Accessibility is a fundamental requirement, not an enhancement.**
